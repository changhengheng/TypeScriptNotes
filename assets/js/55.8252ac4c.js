(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{479:function(s,a,t){"use strict";t.r(a);var e=t(65),r=Object(e.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"类型全解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类型全解"}},[s._v("#")]),s._v(" 类型全解")]),s._v(" "),t("p",[t("strong",[s._v("类型")]),s._v("是指一系列值及可以对其执行的操作。")]),s._v(" "),t("p",[s._v("如boolean类型指所有的布尔值（只有true和false）以及可以对其进行的操作（如与或非）")]),s._v(" "),t("h2",{attrs:{id:"any"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#any"}},[s._v("#")]),s._v(" any")]),s._v(" "),t("p",[s._v("TS编译时一切变量都要有类型，如果没有注解，默认（类型推断）为any。")]),s._v(" "),t("p",[s._v("any是兜底类型，包含所有值，并可以对其进行任何操作。也正因any类型如此包容，它会导致很多类型检查无法发现的错误。为了避免这些错误，尽量不使用any类型，如果非用不可，应该显示注解，而不是由TS自己做类型推断。")]),s._v(" "),t("p",[s._v("除any类型之外，其余类型推荐让TS自己做类型推断。")]),s._v(" "),t("h2",{attrs:{id:"类型的操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类型的操作"}},[s._v("#")]),s._v(" 类型的操作")]),s._v(" "),t("p",[t("strong",[s._v("类型别名")])]),s._v(" "),t("p",[s._v("类似于使用变量声明为值声明别名，TS中也可以使用type声明为类型声明别名。")]),s._v(" "),t("div",{staticClass:"language-ts extra-class"},[t("pre",{pre:!0,attrs:{class:"language-ts"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("num")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("number")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" age"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" num "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v(" 等价于"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" age"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("number")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v("\n")])])]),t("p",[s._v("特点：")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("同一类型别名只能声明一次")])]),s._v(" "),t("li",[t("p",[s._v("类型别名采用块级作用域（代码块和函数体中，内部类型别名会覆盖外部的同名类型别名）")])]),s._v(" "),t("li",[t("p",[s._v("可以为一个具体值创建类型别名")]),s._v(" "),t("div",{staticClass:"language-ts extra-class"},[t("pre",{pre:!0,attrs:{class:"language-ts"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Color")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'red'")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Color")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'blue'")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 这个别名会覆盖上面的类型别名 ")]),s._v("\n")])])])])])])}),[],!1,null,null,null);a.default=r.exports}}]);