(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{481:function(t,v,_){"use strict";_.r(v);var a=_(65),r=Object(a.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"类和接口"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#类和接口"}},[t._v("#")]),t._v(" 类和接口")]),t._v(" "),_("h2",{attrs:{id:"类"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#类"}},[t._v("#")]),t._v(" 类")]),t._v(" "),_("p",[_("strong",[t._v("访问修饰符")])]),t._v(" "),_("p",[t._v("TS类中的属性和方法支持三个访问修饰符：")]),t._v(" "),_("p",[t._v("public")]),t._v(" "),_("p",[t._v("​\t任何地方都可访问。默认值。")]),t._v(" "),_("p",[t._v("protected")]),t._v(" "),_("p",[t._v("​\t可由当前类及其子类的实例访问")]),t._v(" "),_("p",[t._v("private")]),t._v(" "),_("p",[t._v("​\t只可由当前类的实例访问")]),t._v(" "),_("p",[t._v("访问修饰符的作用是不让类暴露过多实现细节，而是只开放规范的API，供外部使用。")]),t._v(" "),_("p",[t._v("类可以有实例属性，使用readonly修饰符定义只读实例属性")]),t._v(" "),_("p",[_("strong",[t._v("抽象类")])]),t._v(" "),_("p",[t._v("使用abstract关键字创建抽象类。")]),t._v(" "),_("p",[t._v("扩展（继承）类使用extends关键字")]),t._v(" "),_("p",[t._v("抽象类不能实例化，而是作为定义其子类的基础使用。")]),t._v(" "),_("p",[t._v("抽象类中可以使用abstract关键字定义抽象方法和抽象属性，子类在实现抽象类时也必须实现其抽象方法和抽象属性，否则会报错。")]),t._v(" "),_("p",[t._v("方法有实例方法和静态方法")])])}),[],!1,null,null,null);v.default=r.exports}}]);