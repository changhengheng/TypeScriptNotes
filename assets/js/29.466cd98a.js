(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{462:function(s,t,n){"use strict";n.r(t);var a=n(65),e=Object(a.a)({},(function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"readonly-修饰符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#readonly-修饰符"}},[s._v("#")]),s._v(" readonly 修饰符")]),s._v(" "),n("p",[s._v("readonly 修饰符是一个关键字，用于对类中的属性成员进行修饰，修饰后该属性成员就不能在外部被随意修改了。但是在实例化对象进行初始化的时候，可以以传参的方式通过 constructor 构造函数对其中的属性成员进行修改。而类的普通方法中是不能对属性成员进行修改的。")]),s._v(" "),n("p",[s._v("通过两种方式可以修改 readonly 修饰的属性成员：")]),s._v(" "),n("ul",[n("li",[s._v("实例化的时候传一个值，如果穿了，就使用这个值。如果没传，而且指定了 constructor 的参数默认值，则使用这个默认值。")]),s._v(" "),n("li",[s._v("不指定参数，在使用 readonly 修饰属性数据的时候设定默认值，则直接会使用这个默认值")])]),s._v(" "),n("p",[s._v("如果类的构造函数中没有任何参数，类中的属性此时已经使用 readonly 修饰符修饰了，name 外部也是不能对这个属性值进行修改的")]),s._v(" "),n("p",[s._v("语法：")]),s._v(" "),n("div",{staticClass:"language-ts extra-class"},[n("pre",{pre:!0,attrs:{class:"language-ts"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Person")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("readonly")]),s._v(" name"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("string")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"法外狂徒张三"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 初始值")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v('//constructor(name:string = "法外狂徒张三"){')]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 构造函数内部是可以修改只读属性的")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// this.name = name")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//}")]),s._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("constructor")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//没有参数的构造函数")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("sayHi")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("console")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"你好"')]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 类中的普通方法中也是不能修改readonly修饰的成员属性值的")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// this.name = "李四" // 无法分配到 "name" ，因为它是只读属性。')]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" person"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Person "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Person")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("console")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("person"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("console")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("person"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// person.name = "李四"; // 无法分配到 "name" ，因为它是只读属性。')]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// console.log(person.name);")]),s._v("\n")])])]),n("p",[s._v("readonly 修饰类中的构造函数中的参数（参数属性）")]),s._v(" "),n("p",[s._v("构造函数中的参数一旦使用 readonly 进行修饰，那么 Person 类中就有了一个 name 的属性成员，这个属性成员也是无法被外部修改的。")]),s._v(" "),n("p",[s._v("构造函数中的参数一旦使用 public 进行修饰，那么 Person 类中就有了一个公共的 name 属性成员。")]),s._v(" "),n("p",[s._v("同样的，构造函数中的参数一旦使用 private 进行修饰，那么 Person 类中就有了一个私有的 name 的属性成员。")]),s._v(" "),n("p",[s._v("同样的，构造函数中的参数一旦使用 protected 进行修饰，那么 Person 类中就有了一个受保护的 name 的属性成员。")]),s._v(" "),n("p",[s._v("语法：")]),s._v(" "),n("div",{staticClass:"language-ts extra-class"},[n("pre",{pre:!0,attrs:{class:"language-ts"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Person")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 构造函数中的参数一旦使用readonly进行修饰后，该参数可以叫参数属性")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("constructor")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("readonly")]),s._v(" name"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("string")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"法外狂徒张三"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" name"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//这样是可以访问到参数属性的，而不是Person类的属性成员，但其实它就是Person类的属性成员")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// constructor(puclic name:string = "法外狂徒张三"){')]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// this.name = name")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" person"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("Person "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Person")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"李四"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// person.name = "王五" // 无法分配到 "name" ，因为它是只读属性。')]),s._v("\n")])])])])}),[],!1,null,null,null);t.default=e.exports}}]);